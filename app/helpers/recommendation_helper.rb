module RecommendationHelper

  # Selects a random array of unseen recommendations that were generated by the params  given as input.
  def random_select(user,n,essay,area)
    if area == 'compute'
      recs = Recommendation.where(user_id:user.id, seen:false, essay:essay, computed_area:true).includes(carreer:[:campu,:weighing,:area])
    else
      recs = Recommendation.where(user_id:user.id, seen:false, essay:essay, area_id:area.to_i).includes(carreer:[:campu,:weighing,:area])
    end

    # Returns nil if there isn't enough recs as were requested.
    if recs.length < n
      return nil
    end
    # Returns n recs randomly.
    return recs.sample(n)
  end

  # Returns k carreers similar to carreer of id carreer_id.
  def request_similar(carreer_id,k)
    url = "#{ENV["FLASK_URL"]}/get_nn" # Newton URL.
    payload = {carreers: carreer_id, k:k}
    request_result = RestClient.post(url,payload.to_json, {content_type: :json, accept: :json})
    request_result = JSON.parse(request_result)['result']["0"] # Parsing of newton output.
    return request_result
  end

  # Sets seen to true for an array of recommendations on only one query.
  def updater(records)
    upd = records.map {|x| [x.id,{seen:true}]}.to_h
    puts upd
    Recommendation.update upd.keys,upd.values
  end

end
